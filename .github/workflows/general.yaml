name: general

on:
  push:
    branches:
      - main
    tags:
      - v*.*.*
  pull_request:
    branches:
      - main

# jobs:
  # Building Previews (on created pull requests)

  # For GNU/Linux we need to build our application in the oldest version we want to support.
  # https://pyinstaller.org/en/stable/usage.html?highlight=glibc#making-gnu-linux-apps-forward-compatible

  # The reason we chose macos-13 as the minimum version:
  # https://forums.developer.apple.com/forums/thread/739988
  # "macOS 14 introduced a new container data protection feature. To learn more about that,
  # see the link in Trusted Execution Resources.The solution here is to sign your code with a stable signing identity.
  # For day-to-day development, that should be your Apple Development signing identity."

  # build:
  #   if: github.event_name == 'pull_request'
  #   strategy:
  #     matrix:
  #       os: [ubuntu-20.04, macos-13, windows-latest]
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #     - name: Install Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.11'
  #     - name: Install dependencies
  #       run: make install
  #     - name: Build software
  #       run: make build
  #     - name: Dist software
  #       run: make dist
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         CSC_LINK: ${{ secrets.CSC_LINK }}
  #         CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
  #         APPLE_ID: ${{ secrets.APPLE_ID }}
  #         APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
  #         APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
  #     - name: Archive build artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: distribution-files-${{ matrix.os }}
  #         path: |
  #           dist/*.deb
  #           dist/*.exe
  #           dist/*.dmg
  #         retention-days: 14

  # Releasing a Draft on Github (on merged pull requests)

  # It will create or update a draft release on Github with all the artifacts we have built.
  # The version in `package.json` needs to be updated to activate this action.

  # release:
  #   if: github.event_name == 'push'
  #   strategy:
  #     matrix:
  #       os: [ubuntu-20.04, macos-13, windows-latest]
  #   runs-on: ${{ matrix.os }}
  #   needs: [test, test-e2e]
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #     - name: Install Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.11'
  #     - name: Build software
  #       run: make build
  #     - name: Release software
  #       run: make release
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
