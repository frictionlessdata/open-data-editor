[project]
name = "odet"
dynamic = ["version"]
requires-python = ">=3.10"
dependencies = [
    "typer>=0.9",
    "marko>=1.0",
    "jinja2>=3.1",
    "tinydb>=4.7",
    "openai>=0.27",
    "pydantic>=2.0",
    "fastapi>=0.78",
    "uvicorn>=0.17",
    "sqlalchemy>=2.0",
    "platformdirs>=3.8",
    "python-multipart>=0.0",
    "typing-extensions>=4.3",
    "frictionless[ckan,csv,excel,json,github,pandas,sql,zenodo]>=5.15.9",
    "gitignore-parser>=0.1",
]

[tool.hatch.version]
path = "package.json"
pattern = '"version": "(?P<version>.*)"'

[tool.hatch.envs.default]
python = "3.10"
dependencies = [
    "ruff",
    "httpx",
    "isort",
    "black",
    "pytest",
    "neovim",
    "pyright==1.1.317",
    "ipython",
    "pytest-cov",
    "pytest-vcr",
    "pytest-mock",
    "pytest-only",
    "pytest-dotenv",
    "pytest-timeout",
    "pytest-lazy-fixture",
]

[tool.hatch.envs.default.scripts]
# TODO: support autoreloading and providing a custom folder/port
check = [
  "pyright server",
]
format = [
  "ruff server --fix",
  "isort server",
  "black server",
]
lint = [
  "ruff server",
  "isort server --check",
  "black server --check",
]
spec = [
  "pytest --cov server --cov-report term-missing --cov-report html:coverage --cov-fail-under 70 --timeout=300",
]
start = [
  "python -m server",
]
test = [
  "hatch run lint",
  "hatch run check",
  "hatch run spec",
]

[tool.black]
line-length = 90

[tool.isort]
profile = "black"
multi_line_output = 9

[tool.ruff]
line-length = 90
ignore = ["E501", "E731"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403"]

[tool.pytest.ini_options]
testpaths = ["server"]
env_files = [".env"]
markers = ["ci: integrational tests (select with '--ci')"]

[tool.pyright]
strict = ["server"]
include = ["server"]
ignore = ["**/__init__.py", "**/__spec__/**/*", "**/conftest.py"]
